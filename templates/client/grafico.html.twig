{% extends 'dashboard.html.twig' %}

{% block title %}Listar Clientes
{% endblock %}

{% block body %}
	<!-- Begin Page Content -->
	<div
		class="container-fluid">

		<!-- Page Heading -->
		<div class="d-sm-flex align-items-center justify-content-between mb-4">
			<h1 class="h3 mb-0 text-gray-800">Relatorio gráfico</h1>
		</div>


		<!-- Card Body -->
		<div class="card shadow mb-4">
			<div class="card-header py-3">
				<h6 class="m-0 font-weight-bold text-primary">Demonstrativo de rendimentos</h6>
			</div>
			<div class="card-body">
				<div class="chart-area">
					<canvas id="myBarChart"></canvas>
				</div>
			</div>
		</div>


		<!-- Card Body -->
		<div class="card shadow mb-4">
			<div class="card-header py-3">
				<h6 class="m-0 font-weight-bold text-primary">Demonstrativo de rendimentos</h6>
			</div>
			<div class="card-body">
				 <div class="table-responsive">
					<table class="table table-sm table-striped table-hover table-bordered" id="dataTable" width="100%" cellspacing="0">
						<thead class="thead-dark">
							<tr>
								<th>Cliente</th>
								<th>Ativos</th>
								<th>Investimento</th>
								<th>Ganho/Perda</th>
								<th>Ganho / Perda %</th>
							</tr>
						</thead>
						<tbody>
                           {% set total = 0 %}
                           {% set budget = 0 %}
							{% for list in lists %}
                            {% set total = total + list.value %}
                            {% set budget = budget + list.budget %}
								<tr>
									<td>{{ list.cliente }}</td>
									<td>{{ list.data_aport }}</td>
									<td>{{ list.value }}</td>
									<td>{{ list.budget|raw }}</td>
									<td class="text-center">{{ list.percentual }}</td>
									
								</tr>
							{% endfor %}
						</tbody>
                        <tfoot>
							<tr>
								<th colspan="2">Total:</th>
								<th>€ {{ total }}</th>
								<th>€ {{ budget }}</th>
								<th></th>
							</tr>
                        </tfoot>
					</table>
				</div>
			</div>
		</div>
	</div>

	<!-- /.container-fluid -->
{% endblock %}
{% block stylesheets %}
	<link href="{{ asset('adm/vendor/datatables/dataTables.bootstrap4.min.css') }}" rel="stylesheet">
{% endblock %}
{% block javascripts %}
	<script src="{{ asset('adm/vendor/datatables/jquery.dataTables.min.js') }}"></script>
	<script src="{{ asset('adm/vendor/datatables/dataTables.bootstrap4.min.js') }}"></script>
	<script>
		$(document).ready(function () {
function number_format(numero, decimal, decimal_separador, milhar_separador) {
numero = (numero + '').replace(/[^0-9+\-Ee.]/g, '');
var n = !isFinite(+ numero) ? 0 : + numero,
prec = !isFinite(+ decimal) ? 0 : Math.abs(decimal),
sep = (typeof milhar_separador === 'undefined') ? ',' : milhar_separador,
dec = (typeof decimal_separador === 'undefined') ? '.' : decimal_separador,
s = '',
toFixedFix = function (n, prec) {
var k = Math.pow(10, prec);
return '' + Math.round(n * k) / k;
};
s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
if (s[0].length > 3) {
s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
}
if ((s[1] || '').length < prec) {
s[1] = s[1] || '';
s[1] += new Array(prec - s[1].length + 1).join('0');
}
return s.join(dec);
}

function decFormatMoeda(value) {
return number_format(value, 2, ',', '.');
}

function decFormat(value) {
return number_format(value, 2, '', '.');
}

const moeda = function (v) {

if ($.isNumeric(v)) {
if (v === '-0') { // se v = zero negativo retorna zero positivo
return 0;
} else {
v = v.replace(/\d(?=(?:\d{3})+(?:\D|$))/g, "$&.");
return decFormatMoeda(v);
}
} else {
return '-';
}
};
let configsDatatables = {
'language': {

"sEmptyTable": "Nenhum registro encontrado",
"sInfo": "&raquo; Mostrando _START_ à _END_ - <b>Total de registros: _TOTAL_</b>",
"sInfoEmpty": "&raquo; Não há nenhum registro",
"sInfoFiltered": "(Filtrados de _MAX_ registros)",
"sInfoPostFix": "",
"sInfoThousands": ".",
"sLengthMenu": "_MENU_ Resultados por página",
"sProcessing": "<button class='btn btn-secondary' type='button' disabled><span class='spinner-border spinner-border-sm' role='status' aria-hidden='true'></span> Processando... </button>",
"sLoadingRecords": "<button class='btn btn-secondary mt-5' type='button' disabled><span class='spinner-border spinner-border-sm' role='status' aria-hidden='true'></span> Carregando... </button>",
"sZeroRecords": "Nenhum registro encontrado",
"sSearch": "<i class ='fas fa-search fa-1x' title='Pesquisar'></i>",
"oPaginate": {
"sNext": "Próximo",
"sPrevious": "Anterior",
"sFirst": "Primeiro",
"sLast": "Último"
},
"oAria": {
"sSortAscending": ": Ordenar colunas de forma ascendente",
"sSortDescending": ": Ordenar colunas de forma descendente"
}

},
'columnDefs': [
{
'targets': [
2, 3, 4
],
'createdCell': function (nTd, sData, oData, iRow, iCol) {
let v;
if (iCol === 2 || iCol === 3) {
if (sData !== '-') {
v = moeda(sData);
} else {
v = sData;
}

$(nTd).text (`€ ${v}`);

if (sData < 0) {
$(nTd).css('color', 'red')
}
}
if (iCol === 4) {
$(nTd).text(sData + '%');

if (sData < 0) {
$(nTd).css('color', 'red')
}
}
}
}
]
};
$('#dataTable').DataTable(configsDatatables);
});
	</script>
<script>
// Set new default font family and font color to mimic Bootstrap's default styling
Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
Chart.defaults.global.defaultFontColor = '#858796';

function number_format(number, decimals, dec_point, thousands_sep) {
  // *     example: number_format(1234.56, 2, ',', ' ');
  // *     return: '1 234,56'
  number = (number + '').replace(',', '').replace(' ', '');
  var n = !isFinite(+number) ? 0 : +number,
    prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
    sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
    dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
    s = '',
    toFixedFix = function(n, prec) {
      var k = Math.pow(10, prec);
      return '' + Math.round(n * k) / k;
    };
  // Fix for IE parseFloat(0.55).toFixed(0) = 0;
  s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
  if (s[0].length > 3) {
    s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
  }
  if ((s[1] || '').length < prec) {
    s[1] = s[1] || '';
    s[1] += new Array(prec - s[1].length + 1).join('0');
  }
  return s.join(dec);
}

// Bar Chart Example
var ctx = document.getElementById("myBarChart");
var myBarChart = new Chart(ctx, {
  type: 'bar',
  data: {
    labels: {{ meses|raw }},
    datasets: [{
      label: "Revenue",
      backgroundColor: "#4e73df",
      hoverBackgroundColor: "#2e59d9",
      borderColor: "#4e73df",
      data: {{ valores|raw }},
    }],
  },
  options: {
    maintainAspectRatio: false,
    layout: {
      padding: {
        left: 10,
        right: 25,
        top: 25,
        bottom: 0
      }
    },
    scales: {
      xAxes: [{
        time: {
          unit: 'month'
        },
        gridLines: {
          display: false,
          drawBorder: false
        },
        ticks: {
          maxTicksLimit: 6
        },
        maxBarThickness: 25,
      }],
      yAxes: [{
        ticks: {
          min: 0,
          max: {{ totalValue }},
          maxTicksLimit: 5,
          padding: 10,
          // Include a dollar sign in the ticks
          callback: function(value, index, values) {
            return '€' + number_format(value);
          }
        },
        gridLines: {
          color: "rgb(234, 236, 244)",
          zeroLineColor: "rgb(234, 236, 244)",
          drawBorder: false,
          borderDash: [2],
          zeroLineBorderDash: [2]
        }
      }],
    },
    legend: {
      display: false
    },
    tooltips: {
      titleMarginBottom: 10,
      titleFontColor: '#6e707e',
      titleFontSize: 14,
      backgroundColor: "rgb(255,255,255)",
      bodyFontColor: "#858796",
      borderColor: '#dddfeb',
      borderWidth: 1,
      xPadding: 15,
      yPadding: 15,
      displayColors: false,
      caretPadding: 10,
      callbacks: {
        label: function(tooltipItem, chart) {
          var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
          return datasetLabel + ': €' + number_format(tooltipItem.yLabel);
        }
      }
    },
  }
});
</script>
{% endblock %}

